{
    "SakilaProject/.mvn/wrapper/MavenWrapperDownloader.java": [
        "{\n  \"file\": \"MavenWrapperDownloader.java\",\n  \"summary\": \"This file is part of the Maven Wrapper project and is responsible for downloading the Maven wrapper JAR file. It uses Java's built-in networking and file I/O capabilities to fetch the wrapper JAR from a predefined URL and save it to a local file.\",\n  \"methods\": [\n    {\n      \"name\": \"main\",\n      \"signature\": \"public static void main(String[] args)\",\n      \"description\": \"The main entry point of the application. It downloads the Maven wrapper JAR file and saves it to the local file system.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"downloadFile\",\n      \"signature\": \"private static void downloadFile(URL url, File destination)\",\n      \"description\": \"Downloads the file from the specified URL and saves it to the given destination file.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getMavenWrapperVersion\",\n      \"signature\": \"private static String getMavenWrapperVersion()\",\n      \"description\": \"Retrieves the version of the Maven wrapper from the Maven properties file.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getMavenWrapperUrl\",\n      \"signature\": \"private static URL getMavenWrapperUrl(String version)\",\n      \"description\": \"Constructs the URL for downloading the Maven wrapper JAR file based on the specified version.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getMavenWrapperPath\",\n      \"signature\": \"private static String getMavenWrapperPath()\",\n      \"description\": \"Determines the local file path where the Maven wrapper JAR file should be saved.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MavenWrapperDownloader.java\",\n  \"summary\": \"This file is responsible for downloading the Maven wrapper, which is a utility that allows users to run Maven without having to install it on their system. The class contains methods to download the Maven wrapper, check if it's already downloaded, and extract the Maven version from the downloaded file.\",\n  \"methods\": [\n    {\n      \"name\": \"main\",\n      \"signature\": \"public static void main(String[] args)\",\n      \"description\": \"The main entry point of the application. It checks if the Maven wrapper is already downloaded, and if not, it downloads it.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"downloadMavenWrapperJar\",\n      \"signature\": \"private static void downloadMavenWrapperJar()\",\n      \"description\": \"Downloads the Maven wrapper JAR file from the default URL or a custom URL specified in the maven-wrapper.properties file.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getMavenWrapperVersion\",\n      \"signature\": \"private static String getMavenWrapperVersion()\",\n      \"description\": \"Extracts the Maven wrapper version from the downloaded JAR file.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"isMavenWrapperJarPresent\",\n      \"signature\": \"private static boolean isMavenWrapperJarPresent()\",\n      \"description\": \"Checks if the Maven wrapper JAR file is already present in the .mvn/wrapper directory.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MavenWrapperDownloader.java\",\n  \"summary\": \"This code is responsible for downloading the Maven wrapper, which is a utility that allows users to run Maven without having to install it on their system. The code checks if the Maven wrapper JAR file exists in the `.mvn/wrapper` directory, and if not, it downloads it from the specified URL.\",\n  \"methods\": [\n    {\n      \"name\": \"main\",\n      \"signature\": \"public static void main(String args[])\",\n      \"description\": \"The main entry point of the application. It starts the downloader and uses the base directory specified in the command-line arguments to locate the Maven wrapper JAR file.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MavenWrapperDownloader.java\",\n  \"summary\": \"This code is responsible for downloading the Maven wrapper, which is a script that allows users to run Maven without having to install it on their system. The code checks if a custom wrapper URL is specified in the `maven-wrapper.properties` file, and if not, it uses a default URL to download the wrapper.\",\n  \"methods\": [\n    {\n      \"name\": \"main\",\n      \"signature\": \"public static void main(String[] args)\",\n      \"description\": \"The main entry point of the program, which downloads the Maven wrapper.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MavenWrapperDownloader.java\",\n  \"summary\": \"This code is part of the Maven Wrapper, which is a utility that allows a Maven project to be built without requiring the user to have Maven installed on their system. The code is responsible for downloading the Maven Wrapper JAR file from a specified URL.\",\n  \"methods\": [\n    {\n      \"name\": \"N/A\",\n      \"signature\": \"N/A\",\n      \"description\": \"This code is part of a larger block that is responsible for closing the input stream for the Maven Wrapper property file. If an IOException occurs during the closing of the input stream, it is ignored.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MavenWrapperDownloader.java\",\n  \"summary\": \"This code is responsible for downloading the Maven wrapper JAR file to the specified directory.\",\n  \"methods\": [\n    {\n      \"name\": \"downloadFileFromURL\",\n      \"signature\": \"downloadFileFromURL(String url, File destination)\",\n      \"description\": \"Downloads a file from the specified URL and saves it to the specified destination.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MavenWrapperDownloader.java\",\n  \"summary\": \"This file contains a utility method to download a file from a URL and save it to a local destination. It also handles basic authentication if the necessary environment variables are set.\",\n  \"methods\": [\n    {\n      \"name\": \"downloadFileFromURL\",\n      \"signature\": \"private static void downloadFileFromURL(String urlString, File destination) throws Exception\",\n      \"description\": \"Downloads a file from the specified URL and saves it to the given destination file. If the MVNW_USERNAME and MVNW_PASSWORD environment variables are set, it uses basic authentication to access the URL.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java": [
        "{\n  \"file\": \"MockTests.java\",\n  \"summary\": \"This file contains unit tests for the Sakila project using Mockito. It tests the functionality of the ActorController, CategoryController, CustomerController, and FilmController classes.\",\n  \"methods\": [\n    {\n      \"name\": \"setUp\",\n      \"signature\": \"public void setUp()\",\n      \"description\": \"Sets up the test environment by initializing Mockito annotations.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testActorController\",\n      \"signature\": \"public void testActorController()\",\n      \"description\": \"Tests the ActorController class by mocking the ActorService and verifying the behavior of the controller methods.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"testCategoryController\",\n      \"signature\": \"public void testCategoryController()\",\n      \"description\": \"Tests the CategoryController class by mocking the CategoryService and verifying the behavior of the controller methods.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"testCustomerController\",\n      \"signature\": \"public void testCustomerController()\",\n      \"description\": \"Tests the CustomerController class by mocking the CustomerService and verifying the behavior of the controller methods.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"testFilmController\",\n      \"signature\": \"public void testFilmController()\",\n      \"description\": \"Tests the FilmController class by mocking the FilmService and verifying the behavior of the controller methods.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MockTests.java\",\n  \"summary\": \"This file contains unit tests for various services and repositories in the Sakila project using Mockito. It sets up mock instances of the repositories and services, and verifies the behavior of the methods being tested.\",\n  \"methods\": [\n    {\n      \"name\": \"MockTests\",\n      \"signature\": \"public MockTests()\",\n      \"description\": \"Default constructor for the MockTests class.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the Sakila project using Mockito framework.\",\n  \"methods\": [\n    {\n      \"name\": \"init\",\n      \"signature\": \"public void init()\",\n      \"description\": \"Initializes the Mockito annotations for the test class.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testActorById\",\n      \"signature\": \"public void testActorById()\",\n      \"description\": \"Tests the findActorById method in the ActorController class. It creates a mock Actor object, sets the actorId, and then verifies that the method returns the expected Actor object.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the Actor-related functionality in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"testActorByFirstName\",\n      \"signature\": \"public void testActorByFirstName()\",\n      \"description\": \"This test method verifies that the `findActorById` method in the `actorController` correctly retrieves an Actor by their first name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testActorByLastName\",\n      \"signature\": \"public void testActorByLastName()\",\n      \"description\": \"This test method verifies that the `findActorById` method in the `actorController` correctly retrieves an Actor by their last name.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the ActorController class using Mockito to mock the ActorRepository.\",\n  \"methods\": [\n    {\n      \"name\": \"testActorByMore\",\n      \"signature\": \"public void testActorByMore()\",\n      \"description\": \"This test checks that the ActorController can correctly retrieve an Actor by their ID and that the returned Actor has the expected first and last name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testActorByFullName\",\n      \"signature\": \"public void testActorByFullName()\",\n      \"description\": \"This test checks that the ActorController can correctly retrieve an Actor by their ID and that the returned Actor has the expected last update timestamp.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the FilmController class using Mockito.\",\n  \"methods\": [\n    {\n      \"name\": \"testFilmByID\",\n      \"signature\": \"public void testFilmByID()\",\n      \"description\": \"This test method verifies that the findFilmByID method in the FilmController class correctly retrieves a film by its ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testFilmByDescritption\",\n      \"signature\": \"public void testFilmByDescritption()\",\n      \"description\": \"This test method verifies that the findFilmByID method in the FilmController class correctly retrieves a film by its description.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the FilmController class using Mockito to mock the FilmRepository.\",\n  \"methods\": [\n    {\n      \"name\": \"testFilmByRating\",\n      \"signature\": \"public void testFilmByRating()\",\n      \"description\": \"This test checks that the findFilmByID method in the FilmController class correctly retrieves a film by its rating.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testFilmByLength\",\n      \"signature\": \"public void testFilmByLength()\",\n      \"description\": \"This test checks that the findFilmByID method in the FilmController class correctly retrieves a film by its length.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testFilmByName\",\n      \"signature\": \"public void testFilmByName()\",\n      \"description\": \"This test checks that the findFilmByID method in the FilmController class correctly retrieves a film by its title.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This code snippet is a unit test for the `testFilmByDescription` method, which tests the functionality of retrieving a film by its description.\",\n  \"methods\": [\n    {\n      \"name\": \"testFilmByDescription\",\n      \"signature\": \"public void testFilmByDescription()\",\n      \"description\": \"This method tests the functionality of retrieving a film by its description. It creates a new `Film` object, sets its description and film ID, and then uses the `filmRepository.getFilmByFilmId()` method to retrieve the film. Finally, it asserts that the retrieved film's description matches the expected description.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MockTests.java\",\n  \"summary\": \"This code snippet is a unit test for the `Film` entity in the Sakila project. It tests the functionality of the `Film` class by creating a mock `Film` object and verifying its properties.\",\n  \"methods\": [\n    {\n      \"name\": \"testFilms\",\n      \"signature\": \"public void testFilms()\",\n      \"description\": \"This method tests the functionality of the `Film` class by creating a mock `Film` object and verifying its properties.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the CategoryController class using Mockito to mock the CategoryRepository.\",\n  \"methods\": [\n    {\n      \"name\": \"testCategoryById\",\n      \"signature\": \"public void testCategoryById()\",\n      \"description\": \"This test method verifies that the getCategoryById method in the CategoryController class returns the correct Category object when given a valid category ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testCategoryByName\",\n      \"signature\": \"public void testCategoryByName()\",\n      \"description\": \"This test method verifies that the getCategoryById method in the CategoryController class returns the correct Category object when given a valid category name.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This code snippet is a unit test for the `getCustomerByCustomerId` method of the `customerRepository` class. It creates a `Customer` object, sets its `customerId` to 10, and then mocks the `customerRepository.getCustomerByCustomerId` method to return the created `Customer` object. The test then asserts that the returned `Customer` object has the expected `customerId` of 10.\",\n  \"methods\": [\n    {\n      \"name\": \"testCustomerById\",\n      \"signature\": \"public void testCustomerById()\",\n      \"description\": \"Tests the `getCustomerByCustomerId` method of the `customerRepository` class.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the Sakila project, specifically testing the Customer and Staff entities.\",\n  \"methods\": [\n    {\n      \"name\": \"testCustomer\",\n      \"signature\": \"public void testCustomer()\",\n      \"description\": \"This test method verifies the functionality of the Customer entity. It creates a new Customer object, sets its properties, and then asserts that the values are correctly retrieved.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testStaff\",\n      \"signature\": \"public void testStaff()\",\n      \"description\": \"This test method verifies the functionality of the Staff entity. It creates a new Staff object, sets its properties, and then asserts that the values are correctly retrieved.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MockTests.java\",\n  \"summary\": \"This file contains a unit test for the Staff class in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"testStaff\",\n      \"signature\": \"public void testStaff()\",\n      \"description\": \"This test method creates a new Staff object, sets its properties, and then verifies that the properties are correctly set.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the FilmController class.\",\n  \"methods\": [\n    {\n      \"name\": \"testFilmController\",\n      \"signature\": \"public void testFilmController()\",\n      \"description\": \"Tests the getFilmDetails method of the FilmController class.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testFilmController2\",\n      \"signature\": \"public void testFilmController2()\",\n      \"description\": \"Tests the getFilms method of the FilmController class.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the CategoryController and ActorController classes.\",\n  \"methods\": [\n    {\n      \"name\": \"testCategory\",\n      \"signature\": \"public void testCategory()\",\n      \"description\": \"Tests the getCategoryDetails method of the CategoryController class.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testCategory2\",\n      \"signature\": \"public void testCategory2()\",\n      \"description\": \"Tests the getCategories method of the CategoryController class.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testActorController1\",\n      \"signature\": \"public void testActorController1()\",\n      \"description\": \"Tests the getActors method of the ActorController class.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains unit tests for the CustomerController class.\",\n  \"methods\": [\n    {\n      \"name\": \"testCustomerController\",\n      \"signature\": \"public void testCustomerController()\",\n      \"description\": \"Tests the getCustomers method of the CustomerController class.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"testCustomerController2\",\n      \"signature\": \"public void testCustomerController2()\",\n      \"description\": \"Tests the showUsersRentalHistory method of the CustomerController class.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"MockTests.java\",\n  \"summary\": \"This code snippet is a test method that tests the functionality of the Inventory class in the SakilaProject. It creates a new Film object, sets its release year and last update timestamp, and then creates a new Inventory object with the film ID, inventory ID, and last update timestamp. It then mocks the behavior of the inventoryRepository to return the created Inventory object when the getInventoriesByInventoryId method is called. Finally, it asserts that the returned Inventory object has the expected values for its inventory ID and last update timestamp.\",\n  \"methods\": [\n    {\n      \"name\": \"testInventory\",\n      \"signature\": \"public void testInventory()\",\n      \"description\": \"Tests the functionality of the Inventory class by creating a new Film and Inventory object, mocking the behavior of the inventoryRepository, and asserting the expected values of the returned Inventory object.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains a unit test for the Rental class.\",\n  \"methods\": [\n    {\n      \"name\": \"testRental\",\n      \"signature\": \"public void testRental()\",\n      \"description\": \"This method tests the functionality of the Rental class by creating instances of Inventory, Customer, Staff, and Rental, and setting their properties.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This code snippet is part of a test suite for the Sakila project. It appears to be testing the behavior of the `getRentalByRentalId` method of the `rentalRepository` object.\",\n  \"methods\": [\n    {\n      \"name\": \"N/A\",\n      \"signature\": \"N/A\",\n      \"description\": \"The code snippet does not contain any method definitions. It appears to be a series of assertions testing the behavior of a mocked `Rental` object.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/MockTests.java\",\n  \"summary\": \"This file contains a unit test for the `testCategoryByTimeStamp()` method.\",\n  \"methods\": [\n    {\n      \"name\": \"testCategoryByTimeStamp\",\n      \"signature\": \"public void testCategoryByTimeStamp()\",\n      \"description\": \"This test method checks if the `lastUpdate` timestamp of a `Category` object is correctly set and retrieved.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/test/java/com/sparta/engineering72/sakilaproject/SakilaProjectApplicationTests.java": [
        "{\n  \"file\": \"SakilaProjectApplicationTests.java\",\n  \"summary\": \"This file contains unit tests for the MainController class in the SakilaProject application.\",\n  \"methods\": [\n    {\n      \"name\": \"MainController1\",\n      \"signature\": \"public void MainController1()\",\n      \"description\": \"Tests the home() method of the MainController class.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"MainController2\",\n      \"signature\": \"public void MainController2()\",\n      \"description\": \"Tests the account() method of the MainController class.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"MainController3\",\n      \"signature\": \"public void MainController3()\",\n      \"description\": \"Tests the login() method of the MainController class.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/SakilaProjectApplication.java": [
        "{\n  \"file\": \"SakilaProjectApplication.java\",\n  \"summary\": \"This is the main application class for the Sakila Project, which is a Spring Boot application. The class is annotated with @SpringBootApplication, which is a convenience annotation that adds all of the following:\n- @Configuration\n- @EnableAutoConfiguration\n- @ComponentScan\nThe main() method uses Spring Boot's SpringApplication.run() method to launch an application.\",\n  \"methods\": [\n    {\n      \"name\": \"main\",\n      \"signature\": \"public static void main(String[] args)\",\n      \"description\": \"The main method that runs the Spring Boot application.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/WebSecurityConfig.java": [
        "{\n  \"file\": \"WebSecurityConfig.java\",\n  \"summary\": \"This class configures the web security for the Sakila Project application. It sets up authentication and authorization rules using Spring Security.\",\n  \"methods\": [\n    {\n      \"name\": \"configure\",\n      \"signature\": \"protected void configure(HttpSecurity http) throws Exception\",\n      \"description\": \"Configures the HTTP security settings, including the login page, logout functionality, and access control rules.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"configure\",\n      \"signature\": \"protected void configure(AuthenticationManagerBuilder auth) throws Exception\",\n      \"description\": \"Configures the authentication manager, including the user details service and password encoder.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"passwordEncoder\",\n      \"signature\": \"@Bean public PasswordEncoder passwordEncoder()\",\n      \"description\": \"Provides a BCrypt password encoder for password hashing.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"daoAuthenticationProvider\",\n      \"signature\": \"@Bean public DaoAuthenticationProvider daoAuthenticationProvider()\",\n      \"description\": \"Provides a DAO authentication provider that uses the user details service and password encoder.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"WebSecurityConfig.java\",\n  \"summary\": \"This class configures the web security settings for the Sakila project. It extends the WebSecurityConfigurerAdapter class and uses the CustomerService, StaffService, and SuccessHandler services to handle authentication and authorization.\",\n  \"methods\": [\n    {\n      \"name\": \"configure\",\n      \"signature\": \"protected void configure(HttpSecurity http) throws Exception\",\n      \"description\": \"Configures the HTTP security settings, including authentication, authorization, and session management.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"configure\",\n      \"signature\": \"protected void configure(AuthenticationManagerBuilder auth) throws Exception\",\n      \"description\": \"Configures the authentication manager, which is responsible for authenticating users.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"passwordEncoder\",\n      \"signature\": \"@Bean public PasswordEncoder passwordEncoder()\",\n      \"description\": \"Provides a password encoder bean, which is used to hash and verify passwords.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"WebSecurityConfig.java\",\n  \"summary\": \"This file defines the security configuration for the Sakila web application. It specifies which URL paths should be secured and which should not, as well as the roles required to access certain pages.\",\n  \"methods\": [\n    {\n      \"name\": \"configure\",\n      \"signature\": \"protected void configure(HttpSecurity http) throws Exception\",\n      \"description\": \"Defines which URL paths should be secured and which should not. The method configures the HttpSecurity object to authorize requests based on the specified rules.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"WebSecurityConfig.java\",\n  \"summary\": \"This code snippet is from the WebSecurityConfig class, which is responsible for configuring the web security settings for the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"configure\",\n      \"signature\": \"configure(HttpSecurity http)\",\n      \"description\": \"This method configures the security settings for the web application. It sets up the login and logout process, as well as the exception handling for denied access.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"WebSecurityConfig.java\",\n  \"summary\": \"This file contains the configuration for web security in the Sakila project. It sets up the user details service, password encoder, and authentication provider for the application.\",\n  \"methods\": [\n    {\n      \"name\": \"userDetailsService\",\n      \"signature\": \"public UserDetailsService userDetailsService()\",\n      \"description\": \"Provides a UserDetailsService implementation for the application.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"passwordEncoder\",\n      \"signature\": \"public PasswordEncoder passwordEncoder()\",\n      \"description\": \"Provides a BCryptPasswordEncoder for password encoding and verification.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"authenticationProvider\",\n      \"signature\": \"public DaoAuthenticationProvider authenticationProvider()\",\n      \"description\": \"Provides a DaoAuthenticationProvider that uses the configured UserDetailsService and PasswordEncoder.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"configure\",\n      \"signature\": \"protected void configure(AuthenticationManagerBuilder auth) throws Exception\",\n      \"description\": \"Configures the authentication manager to use the provided authentication provider.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/SuccessHandler.java": [
        "{\n  \"file\": \"SuccessHandler.java\",\n  \"summary\": \"This class implements the AuthenticationSuccessHandler interface from the Spring Security framework. It is responsible for handling the successful authentication of a user by redirecting them to the appropriate URL based on their granted authorities.\",\n  \"methods\": [\n    {\n      \"name\": \"onAuthenticationSuccess\",\n      \"signature\": \"public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException\",\n      \"description\": \"This method is called when a user successfully authenticates. It determines the appropriate URL to redirect the user to based on their granted authorities, and then performs the redirect.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getRedirectStrategy\",\n      \"signature\": \"public RedirectStrategy getRedirectStrategy()\",\n      \"description\": \"This method returns the RedirectStrategy used by the SuccessHandler to perform the redirect.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRedirectStrategy\",\n      \"signature\": \"public void setRedirectStrategy(RedirectStrategy redirectStrategy)\",\n      \"description\": \"This method sets the RedirectStrategy used by the SuccessHandler to perform the redirect.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SuccessHandler.java\",\n  \"summary\": \"This class is a custom implementation of the `AuthenticationSuccessHandler` interface from the Spring Security framework. It is responsible for handling the successful authentication of a user and redirecting them to the appropriate page based on their role.\",\n  \"methods\": [\n    {\n      \"name\": \"onAuthenticationSuccess\",\n      \"signature\": \"public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)\",\n      \"description\": \"This method is called when a user successfully authenticates. It retrieves the authorities (roles) associated with the authenticated user and redirects them to the appropriate page based on their role (either '/customer' for 'ROLE_USER' or '/owner' for 'ROLE_ADMIN').\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/SuccessHandler.java\",\n  \"summary\": \"This code snippet is part of the SuccessHandler class, which is responsible for handling successful authentication in a web application.\",\n  \"methods\": [\n    {\n      \"name\": \"onAuthenticationSuccess\",\n      \"signature\": \"public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException\",\n      \"description\": \"This method is called when a user successfully authenticates. It redirects the user to the appropriate page based on their role.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/MvcConfig.java": [
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/MvcConfig.java\",\n  \"summary\": \"This file configures the MVC (Model-View-Controller) for the Sakila Project web application. It sets up view controllers for the home, root, and login pages.\",\n  \"methods\": [\n    {\n      \"name\": \"addViewControllers\",\n      \"signature\": \"public void addViewControllers(ViewControllerRegistry registry)\",\n      \"description\": \"Adds view controllers for the home, root, and login pages.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/UserDetailsServiceImpl.java": [
        "{\n  \"file\": \"UserDetailsServiceImpl.java\",\n  \"summary\": \"This class implements the UserDetailsService interface from Spring Security. It is responsible for loading user-specific data and returning a UserDetails object, which is then used by the authentication manager to perform the authentication.\",\n  \"methods\": [\n    {\n      \"name\": \"loadUserByUsername\",\n      \"signature\": \"loadUserByUsername(String username)\",\n      \"description\": \"This method is called by the authentication manager to load the user-specific data. It first checks if the user is a customer, and if so, it creates a UserDetails object with the customer's email and password. If the user is not a customer, it checks if the user is a staff member, and if so, it creates a UserDetails object with the staff member's email and password. If the user is neither a customer nor a staff member, it throws a UsernameNotFoundException.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/UserDetailsServiceImpl.java\",\n  \"summary\": \"This class implements the UserDetailsService interface and is responsible for loading user details by username.\",\n  \"methods\": [\n    {\n      \"name\": \"loadUserByUsername\",\n      \"signature\": \"public UserDetails loadUserByUsername(String anyUsername) throws UsernameNotFoundException\",\n      \"description\": \"This method retrieves the customer or staff user by the provided username and creates a User object with the appropriate authorities.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/UserDetailsServiceImpl.java\",\n  \"summary\": \"This code is part of the UserDetailsServiceImpl class, which is responsible for providing user details to the Spring Security framework.\",\n  \"methods\": [\n    {\n      \"name\": \"loadUserByUsername\",\n      \"signature\": \"loadUserByUsername(String anyUsername)\",\n      \"description\": \"This method is responsible for loading user details based on the provided username. It checks if the user is a customer or a staff member, and then creates a User.UserBuilder object with the appropriate username, password, and role.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/securingweb/FailureHandler.java": [
        "{\n  \"file\": \"FailureHandler.java\",\n  \"summary\": \"This file contains the implementation of the `FailureHandler` class, which implements the `AccessDeniedHandler` interface from the Spring Security framework. The purpose of this class is to handle cases where a user attempts to access a resource they are not authorized to access.\",\n  \"methods\": [\n    {\n      \"name\": \"handle\",\n      \"signature\": \"public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException\",\n      \"description\": \"This method is called when a user attempts to access a resource they are not authorized to access. It redirects the user to the '/error' endpoint.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/respositories/CustomerRepository.java": [
        "{\n  \"file\": \"CustomerRepository.java\",\n  \"summary\": \"This file contains the CustomerRepository interface, which extends the JpaRepository interface. It provides methods for retrieving customer data from the database based on various criteria, such as email, customer ID, and first name.\",\n  \"methods\": [\n    {\n      \"name\": \"getCustomerByCredentials\",\n      \"signature\": \"Customer getCustomerByCredentials(String username, Integer password)\",\n      \"description\": \"Retrieves a customer by their email and customer ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomerByUsername\",\n      \"signature\": \"Customer getCustomerByUsername(String username)\",\n      \"description\": \"Retrieves a customer by their email.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomersByFirstName\",\n      \"signature\": \"List<Customer> getCustomersByFirstName(String firstName)\",\n      \"description\": \"Retrieves a list of customers by their first name.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"CustomerRepository.java\",\n  \"summary\": \"This file contains the CustomerRepository interface, which extends the JpaRepository interface. It provides methods for retrieving customers from the database based on various criteria, such as first name, last name, full name, customer ID, and email. It also provides a method to get the total count of customers in the database.\",\n  \"methods\": [\n    {\n      \"name\": \"getCustomersByFirstName\",\n      \"signature\": \"List<Customer> getCustomersByFirstName(String firstName)\",\n      \"description\": \"Retrieves a list of customers with the specified first name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomersByLastName\",\n      \"signature\": \"List<Customer> getCustomersByLastName(String lastName)\",\n      \"description\": \"Retrieves a list of customers with the specified last name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomersByFullName\",\n      \"signature\": \"List<Customer> getCustomersByFullName(String firstName, String lastName)\",\n      \"description\": \"Retrieves a list of customers with the specified first and last name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomerByCustomerId\",\n      \"signature\": \"Customer getCustomerByCustomerId(Integer id)\",\n      \"description\": \"Retrieves a customer with the specified customer ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomerByEmail\",\n      \"signature\": \"Customer getCustomerByEmail(String email)\",\n      \"description\": \"Retrieves a customer with the specified email address.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomerCount\",\n      \"signature\": \"Integer getCustomerCount()\",\n      \"description\": \"Retrieves the total count of customers in the database.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/respositories/RentalRepository.java": [
        "{\n  \"file\": \"RentalRepository.java\",\n  \"summary\": \"This file contains the RentalRepository interface, which extends the JpaRepository interface. It provides methods for retrieving rental data from the database, including getting a rental by its ID and getting all rentals for a specific customer ID.\",\n  \"methods\": [\n    {\n      \"name\": \"getRentalByRentalId\",\n      \"signature\": \"Rental getRentalByRentalId(Integer id)\",\n      \"description\": \"Retrieves a rental by its rental ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRentalByCustomerId\",\n      \"signature\": \"List<Rental> getRentalByCustomerId(Integer customerId)\",\n      \"description\": \"Retrieves all rentals for a specific customer ID using a native SQL query.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/respositories/StaffRepository.java": [
        "{\n  \"file\": \"StaffRepository.java\",\n  \"summary\": \"This file contains the StaffRepository interface, which extends the JpaRepository interface. It provides methods for interacting with the staff table in the database, including a method to retrieve a staff member by their username.\",\n  \"methods\": [\n    {\n      \"name\": \"getStaffByUsername\",\n      \"signature\": \"Staff getStaffByUsername(String username)\",\n      \"description\": \"Retrieves a staff member by their username using a native SQL query.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/respositories/ActorRepository.java": [
        "{\n  \"file\": \"ActorRepository.java\",\n  \"summary\": \"This file contains the ActorRepository interface, which extends the JpaRepository interface. It provides methods for querying and retrieving Actor entities from the database.\",\n  \"methods\": [\n    {\n      \"name\": \"findActorsByFirstNameAndLastName\",\n      \"signature\": \"List<Actor> findActorsByFirstNameAndLastName(String firstName, String lastName)\",\n      \"description\": \"Finds a list of Actors based on their first and last names.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"findActorsByFirstName\",\n      \"signature\": \"List<Actor> findActorsByFirstName(String firstName)\",\n      \"description\": \"Finds a list of Actors based on their first name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"findActorsByLastName\",\n      \"signature\": \"List<Actor> findActorsByLastName(String lastName)\",\n      \"description\": \"Finds a list of Actors based on their last name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActorByActorId\",\n      \"signature\": \"Actor getActorByActorId(Integer id)\",\n      \"description\": \"Retrieves an Actor entity by their actor ID.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/respositories/FilmRepository.java": [
        "{\n  \"file\": \"FilmRepository.java\",\n  \"summary\": \"This file contains the FilmRepository interface, which extends the JpaRepository interface. It provides methods for retrieving information about films, such as the available count of a specific film and a list of all available films.\",\n  \"methods\": [\n    {\n      \"name\": \"getAvailableFilmCount\",\n      \"signature\": \"Integer getAvailableFilmCount(Integer id)\",\n      \"description\": \"This method retrieves the available count of a specific film by joining the 'film' and 'inventory' tables on the 'film_id' column and counting the number of records where the 'film_id' matches the provided ID.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getAvailableFilms\",\n      \"signature\": \"List<Film> getAvailableFilms()\",\n      \"description\": \"This method retrieves a list of all available films by joining the 'film' and 'inventory' tables on the 'film_id' column.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmRepository.java\",\n  \"summary\": \"This file contains the FilmRepository interface, which extends the JpaRepository interface and provides methods for querying and retrieving film-related data from the database.\",\n  \"methods\": [\n    {\n      \"name\": \"getAvailableFilms\",\n      \"signature\": \"List<Film> getAvailableFilms()\",\n      \"description\": \"Retrieves a list of all available films by performing an inner join between the film and inventory tables on the film_id column.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getAllFilmsByCategory\",\n      \"signature\": \"List<Film> getAllFilmsByCategory(Integer categoryId)\",\n      \"description\": \"Retrieves a list of all films that belong to the specified category by performing an inner join between the film, film_category, and category tables on the respective id columns.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getAllFilmsByActor\",\n      \"signature\": \"List<Film> getAllFilmsByActor(Integer actorId)\",\n      \"description\": \"Retrieves a list of all films that the specified actor has appeared in by performing an inner join between the actor, film_actor, and film tables on the respective id columns.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"findByTitle\",\n      \"signature\": \"List<Film> findByTitle(String title)\",\n      \"description\": \"Retrieves a list of all films that match the specified title.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilmByFilmId\",\n      \"signature\": \"Film getFilmByFilmId(Integer id)\",\n      \"description\": \"Retrieves a single film by its film_id.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/respositories/CategoryRepository.java": [
        "{\n  \"file\": \"CategoryRepository.java\",\n  \"summary\": \"This file contains the CategoryRepository interface, which extends the JpaRepository interface. It provides methods for interacting with the Category entity in the database.\",\n  \"methods\": [\n    {\n      \"name\": \"getCategoryByCategoryId\",\n      \"signature\": \"Category getCategoryByCategoryId(Integer id)\",\n      \"description\": \"Retrieves a Category entity by its category ID.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/respositories/InventoryRepository.java": [
        "{\n  \"file\": \"InventoryRepository.java\",\n  \"summary\": \"This file contains the InventoryRepository interface, which extends the JpaRepository interface. It provides methods for interacting with the Inventory entity in the database.\",\n  \"methods\": [\n    {\n      \"name\": \"getInventoriesByInventoryId\",\n      \"signature\": \"Inventory getInventoriesByInventoryId(Integer inventoryId)\",\n      \"description\": \"Retrieves the Inventory entity with the specified inventory ID, along with the associated Rental entity.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"deleteInventoryByInventoryId\",\n      \"signature\": \"void deleteInventoryByInventoryId(Integer id)\",\n      \"description\": \"Deletes the Inventory entity with the specified film ID.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"InventoryRepository.java\",\n  \"summary\": \"This file contains the InventoryRepository interface, which extends the JpaRepository interface and provides methods for interacting with the inventory table in the database.\",\n  \"methods\": [\n    {\n      \"name\": \"deleteInventoryByInventoryId\",\n      \"signature\": \"void deleteInventoryByInventoryId(@Param(\\\"id\\\") Integer id)\",\n      \"description\": \"Deletes all inventory records with the specified film_id.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getInventoryCount\",\n      \"signature\": \"Integer getInventoryCount()\",\n      \"description\": \"Retrieves the total count of inventory records.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/StaffController.java": [
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/StaffController.java\",\n  \"summary\": \"This file contains the StaffController class, which is a Spring MVC controller responsible for handling staff-related requests in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"staffPage\",\n      \"signature\": \"staffPage(HttpServletRequest request, ModelMap model)\",\n      \"description\": \"This method handles the GET request for the staff page. It retrieves the staff, customer, and inventory data from the respective services and adds them to the model for rendering in the view.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/StaffController.java\",\n  \"summary\": \"This file contains the StaffController class, which is responsible for handling requests related to staff members in the Sakila application.\",\n  \"methods\": [\n    {\n      \"name\": \"StaffController\",\n      \"signature\": \"public StaffController(StaffService staffService, CustomerService customerService, InventoryService inventoryService)\",\n      \"description\": \"Constructor for the StaffController class, which initializes the necessary service dependencies.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"currentUser\",\n      \"signature\": \"public String currentUser(ModelMap modelMap, HttpServletRequest request)\",\n      \"description\": \"This method is mapped to the '/owner' endpoint and retrieves the current staff member, the customer count, and the inventory count, and adds them to the model map. It then returns the '/owner/owner' view.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/CustomerController.java": [
        "{\n  \"file\": \"CustomerController.java\",\n  \"summary\": \"This file contains the CustomerController class, which is a Spring MVC controller responsible for handling customer-related requests and operations. It interacts with various services to manage customer data, film information, and rental details.\",\n  \"methods\": [\n    {\n      \"name\": \"getCustomerPage\",\n      \"signature\": \"public String getCustomerPage(Model model, HttpServletRequest request)\",\n      \"description\": \"Handles the request to display the customer page. It retrieves the customer information and related data, such as films and rentals, and adds them to the model for rendering the view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"updateCustomer\",\n      \"signature\": \"public String updateCustomer(@ModelAttribute(\\\"customer\\\") Customer customer, HttpServletRequest request)\",\n      \"description\": \"Handles the request to update a customer's information. It updates the customer details in the database and redirects the user to the customer page.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"deleteCustomer\",\n      \"signature\": \"public String deleteCustomer(@RequestParam(\\\"customerId\\\") int customerId, HttpServletRequest request)\",\n      \"description\": \"Handles the request to delete a customer. It removes the customer from the database and redirects the user to the customer page.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"addCustomer\",\n      \"signature\": \"public String addCustomer(Model model, HttpServletRequest request)\",\n      \"description\": \"Handles the request to add a new customer. It prepares the model with the necessary data and redirects the user to the customer creation page.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"createCustomer\",\n      \"signature\": \"public String createCustomer(@ModelAttribute(\\\"customer\\\") Customer customer, HttpServletRequest request)\",\n      \"description\": \"Handles the request to create a new customer. It saves the new customer in the database and redirects the user to the customer page.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getCustomerRentals\",\n      \"signature\": \"public String getCustomerRentals(@RequestParam(\\\"customerId\\\") int customerId, Model model, HttpServletRequest request)\",\n      \"description\": \"Handles the request to display the rental history of a customer. It retrieves the customer's rental information and adds it to the model for rendering the view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"returnFilm\",\n      \"signature\": \"public String returnFilm(@RequestParam(\\\"rentalId\\\") int rentalId, HttpServletRequest request)\",\n      \"description\": \"Handles the request to return a rented film. It updates the rental information in the database and redirects the user to the customer's rental history page.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"CustomerController.java\",\n  \"summary\": \"This file contains the CustomerController class, which is responsible for handling customer-related functionality in the Sakila project. It uses various service classes to interact with the underlying data.\",\n  \"methods\": [\n    {\n      \"name\": \"CustomerController\",\n      \"signature\": \"public CustomerController(CustomerService customerService, RentalService rentalService, InventoryService inventoryService, FilmService filmService)\",\n      \"description\": \"Constructor that initializes the necessary service classes for the CustomerController.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"CustomerController.java\",\n  \"summary\": \"This code is a controller class for handling customer-related functionality in the Sakila project. It provides a method to retrieve the current user's information and their order history.\",\n  \"methods\": [\n    {\n      \"name\": \"currentUser\",\n      \"signature\": \"public String currentUser(ModelMap modelMap, HttpServletRequest request)\",\n      \"description\": \"This method retrieves the current user's email from the HTTP request, fetches the corresponding customer information from the database, and then retrieves the customer's rental history. It creates a list of orders based on the rental history and adds the customer and order information to the model map. Finally, it returns the view name 'customer/customer'.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"CustomerController.java\",\n  \"summary\": \"This file contains the CustomerController class, which handles the customer-related functionality in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"getCustomers\",\n      \"signature\": \"@GetMapping(\\\"/owner/customers\\\") public String getCustomers(ModelMap modelMap, @RequestParam(value = \\\"firstName\\\", defaultValue = \\\"ALL CUSTOMERS\\\") String firstNameFilter, @RequestParam(value = \\\"lastName\\\", defaultValue = \\\"ALL CUSTOMERS\\\") String lastNameFilter)\",\n      \"description\": \"This method retrieves a list of customers based on the provided first name and last name filters. If both filters are set to \\\"ALL CUSTOMERS\\\", it retrieves all customers. If only one filter is set, it retrieves customers based on that filter. If both filters are provided, it retrieves customers based on the full name.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"CustomerController.java\",\n  \"summary\": \"This code is part of the CustomerController class, which is responsible for handling customer-related functionality in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"getCustomers\",\n      \"signature\": \"getCustomers(ModelMap modelMap)\",\n      \"description\": \"This method retrieves all customers and adds them to the model map, which is then used to render the 'owner/customers' view.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"CustomerController.java\",\n  \"summary\": \"This code is a part of the SakilaProject and is responsible for handling the customer-related functionality in the application. The `showUsersRentalHistory` method is a controller method that retrieves the rental history of a customer based on the provided customer ID.\",\n  \"methods\": [\n    {\n      \"name\": \"showUsersRentalHistory\",\n      \"signature\": \"public String showUsersRentalHistory(ModelMap modelMap, @PathVariable(name = \\\"id\\\") int id)\",\n      \"description\": \"This method retrieves the rental history of a customer based on the provided customer ID. It fetches the customer object, then retrieves all the rentals associated with that customer. For each rental, it fetches the corresponding inventory and film objects, and creates an `Order` object that combines the customer, film, and rental information. The `Order` objects are then added to a list and passed to the view as a model attribute.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/ActorController.java": [
        "{\n  \"file\": \"ActorController.java\",\n  \"summary\": \"This file contains the ActorController class, which is a Spring MVC controller responsible for handling requests related to actors in the Sakila project. It uses the ActorService and FilmService to interact with the underlying data.\",\n  \"methods\": [\n    {\n      \"name\": \"ActorController\",\n      \"signature\": \"public ActorController(FilmService filmService, ActorService actorService)\",\n      \"description\": \"Constructor that initializes the FilmService and ActorService instances.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActors\",\n      \"signature\": \"@GetMapping(\\\"/actors\\\") public String getActors(@RequestParam(required = false) String searchTerm, ModelMap modelMap)\",\n      \"description\": \"Handles the GET request for the /actors endpoint. It retrieves a list of actors based on an optional search term and adds them to the ModelMap for rendering in the view.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"ActorController.java\",\n  \"summary\": \"This file contains the ActorController class, which is responsible for handling HTTP requests related to actors in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"getActors\",\n      \"signature\": \"public String getActors(ModelMap modelMap, @RequestParam(value = \\\"firstName\\\", defaultValue = \\\"ALL ACTORS\\\") String firstNameFilter, @RequestParam(value = \\\"lastName\\\", defaultValue = \\\"ALL ACTORS\\\") String lastNameFilter)\",\n      \"description\": \"This method handles the GET request for the /actors endpoint. It retrieves a list of actors based on the provided first name and last name filters, and adds them to the ModelMap to be used in the view.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"ActorController.java\",\n  \"summary\": \"This file contains the ActorController class, which is responsible for handling requests related to actors in the Sakila application.\",\n  \"methods\": [\n    {\n      \"name\": \"getActors\",\n      \"signature\": \"public String getActors(ModelMap modelMap)\",\n      \"description\": \"This method is responsible for handling the request to display the list of actors. It retrieves all the actors from the actorService and adds them to the ModelMap, which is then used to render the 'actors/actors' view.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/ActorController.java\",\n  \"summary\": \"This file contains the ActorController class, which handles the routing and processing of requests related to actors in the Sakila application.\",\n  \"methods\": [\n    {\n      \"name\": \"getActorFilmDetails\",\n      \"signature\": \"public String getActorFilmDetails(ModelMap modelMap, @RequestParam(value = \\\"id\\\") Integer id)\",\n      \"description\": \"This method retrieves the full name of an actor and the films they have appeared in, and adds them to the ModelMap to be displayed in the 'actors/actorDetails' view.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"findActorById\",\n      \"signature\": \"public Actor findActorById(Integer id)\",\n      \"description\": \"This method retrieves an actor by their ID using the actorService.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActorFullNameFromID\",\n      \"signature\": \"public String getActorFullNameFromID(Integer id)\",\n      \"description\": \"This method retrieves an actor by their ID using the actorService, and returns their full name (first name and last name).\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/MainController.java": [
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/MainController.java\",\n  \"summary\": \"This file contains the main controller class for the Sakila project, which handles the routing and rendering of the home, login, and account pages.\",\n  \"methods\": [\n    {\n      \"name\": \"home\",\n      \"signature\": \"public String home()\",\n      \"description\": \"Handles the request for the home page and returns the 'home' view.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"login\",\n      \"signature\": \"public String login()\",\n      \"description\": \"Handles the request for the login page and returns the 'login' view.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"account\",\n      \"signature\": \"public String account()\",\n      \"description\": \"Handles the request for the account page and returns the 'account' view.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/CategoryController.java": [
        "{\n  \"file\": \"CategoryController.java\",\n  \"summary\": \"This file contains the CategoryController class, which is a Spring MVC controller responsible for handling requests related to the Category entity. It uses the FilmService and CategoryService to interact with the database and retrieve category-related data.\",\n  \"methods\": [\n    {\n      \"name\": \"CategoryController\",\n      \"signature\": \"public CategoryController(FilmService filmService, CategoryService categoryService)\",\n      \"description\": \"Constructor that initializes the FilmService and CategoryService instances.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCategories\",\n      \"signature\": \"@GetMapping(\\\"/categories\\\") public String getCategories(ModelMap modelMap)\",\n      \"description\": \"Handles the GET request for the /categories endpoint. It retrieves all the categories from the CategoryService and adds them to the ModelMap, which is then used to render the view.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"CategoryController.java\",\n  \"summary\": \"This file contains the CategoryController class, which is responsible for handling HTTP requests related to categories in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"CategoryController\",\n      \"signature\": \"public CategoryController(FilmService filmService, CategoryService categoryService)\",\n      \"description\": \"Constructor that initializes the FilmService and CategoryService dependencies.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCategories\",\n      \"signature\": \"public String getCategories(ModelMap modelMap)\",\n      \"description\": \"Handles the GET request for the '/categories' endpoint, adding all categories to the ModelMap and returning the 'categories/categories' view.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCategoryDetails\",\n      \"signature\": \"public String getCategoryDetails(ModelMap modelMap, @RequestParam(value = \\\"id\\\") Integer id)\",\n      \"description\": \"Handles the GET request for the '/categories/details' endpoint, adding the category and its associated films to the ModelMap and returning the 'categories/categoryDetails' view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getCategoryById\",\n      \"signature\": \"public Category getCategoryById(Integer id)\",\n      \"description\": \"Retrieves a category by its ID using the CategoryService.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/FilmController.java": [
        "{\n  \"file\": \"FilmController.java\",\n  \"summary\": \"This file contains the controller class for the Film entity in the Sakila project. It handles the mapping of HTTP requests to the corresponding service methods for managing films.\",\n  \"methods\": [\n    {\n      \"name\": \"getAllFilms\",\n      \"signature\": \"public String getAllFilms(ModelMap model)\",\n      \"description\": \"Retrieves all films and adds them to the model for rendering in the view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getFilmById\",\n      \"signature\": \"public String getFilmById(@PathVariable int id, ModelMap model)\",\n      \"description\": \"Retrieves a film by its ID and adds it to the model for rendering in the view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"createFilm\",\n      \"signature\": \"public String createFilm(@ModelAttribute Film film, ModelMap model)\",\n      \"description\": \"Handles the creation of a new film and adds it to the model for rendering in the view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"updateFilm\",\n      \"signature\": \"public String updateFilm(@ModelAttribute Film film, ModelMap model)\",\n      \"description\": \"Handles the update of an existing film and adds the updated film to the model for rendering in the view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"deleteFilm\",\n      \"signature\": \"public String deleteFilm(@PathVariable int id, ModelMap model)\",\n      \"description\": \"Handles the deletion of a film by its ID and updates the model accordingly.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getInventoryByFilm\",\n      \"signature\": \"public String getInventoryByFilm(@PathVariable int id, ModelMap model)\",\n      \"description\": \"Retrieves the inventory information for a specific film and adds it to the model for rendering in the view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getRentalsByFilm\",\n      \"signature\": \"public String getRentalsByFilm(@PathVariable int id, ModelMap model)\",\n      \"description\": \"Retrieves the rental information for a specific film and adds it to the model for rendering in the view.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getCustomersByFilm\",\n      \"signature\": \"public String getCustomersByFilm(@PathVariable int id, ModelMap model)\",\n      \"description\": \"Retrieves the customer information for a specific film and adds it to the model for rendering in the view.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/FilmController.java\",\n  \"summary\": \"This file contains the FilmController class, which is responsible for handling HTTP requests related to films in the Sakila application.\",\n  \"methods\": [\n    {\n      \"name\": \"getFilmPage\",\n      \"signature\": \"public String getFilmPage(Model model, @RequestParam(required = false) String filmId)\",\n      \"description\": \"Retrieves the film page and populates the model with the necessary data.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getFilmDetails\",\n      \"signature\": \"public ModelAndView getFilmDetails(@RequestParam(required = false) String filmId, Principal principal)\",\n      \"description\": \"Retrieves the details of a specific film and returns a ModelAndView object.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"addFilm\",\n      \"signature\": \"public String addFilm(@ModelAttribute Film film, ModelMap model)\",\n      \"description\": \"Handles the addition of a new film to the system.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"updateFilm\",\n      \"signature\": \"public String updateFilm(@ModelAttribute Film film, ModelMap model)\",\n      \"description\": \"Handles the update of an existing film in the system.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"deleteFilm\",\n      \"signature\": \"public String deleteFilm(@RequestParam(required = false) String filmId, ModelMap model)\",\n      \"description\": \"Handles the deletion of a film from the system.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/FilmController.java\",\n  \"summary\": \"This file contains the FilmController class, which is responsible for handling film-related operations in the Sakila application.\",\n  \"methods\": [\n    {\n      \"name\": \"FilmController\",\n      \"signature\": \"public FilmController(FilmService filmService, InventoryService inventoryService, RentalService rentalService, CustomerService customerService)\",\n      \"description\": \"Constructor for the FilmController class. It initializes the necessary service objects for film, inventory, rental, and customer operations.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmController.java\",\n  \"summary\": \"This file contains the FilmController class, which handles the routing and processing of requests related to films in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"getFilms\",\n      \"signature\": \"public String getFilms(ModelMap modelMap, @RequestParam(value = \\\"title\\\", defaultValue = \\\"ALL FILMS\\\") String filter)\",\n      \"description\": \"This method handles the GET request for the '/films' endpoint. It retrieves a list of films based on the provided filter parameter. If the filter is 'ALL FILMS', it gets all the films. Otherwise, it gets the films by the specified title. The method then adds the films, available films, and all films to the model map and returns the '/films/films' view.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/controller/FilmController.java\",\n  \"summary\": \"This file contains the controller class for handling film-related requests in the Sakila Project.\",\n  \"methods\": [\n    {\n      \"name\": \"getFilmDetails\",\n      \"signature\": \"public String getFilmDetails(ModelMap modelMap, @RequestParam(value = \\\"id\\\") Integer id)\",\n      \"description\": \"This method is responsible for retrieving the details of a film based on the provided ID and adding the film details and availability status to the model map. It then returns the view name for the film details page.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmController.java\",\n  \"summary\": \"This file contains the controller class for handling film-related operations in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"rentFilm\",\n      \"signature\": \"public String rentFilm(ModelMap modelMap, Principal principal, @PathVariable(\\\"filmid\\\") int filmid)\",\n      \"description\": \"This method handles the process of renting a film. It retrieves the customer information, finds the available inventory for the requested film, and creates a new rental record with the appropriate return date.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmController.java\",\n  \"summary\": \"This code is a Spring MVC controller method that handles the request to display the film details page for the owner. It retrieves a list of films based on a filter parameter, and also calculates the available count for each film. The retrieved data is then added to the model map and the view is returned.\",\n  \"methods\": [\n    {\n      \"name\": \"getFilmDetails\",\n      \"signature\": \"public String getFilmDetails(ModelMap modelMap, @RequestParam(value = \\\"title\\\", defaultValue = \\\"ALL FILMS\\\") String filter)\",\n      \"description\": \"This method is responsible for handling the request to display the film details page for the owner. It takes a `ModelMap` object and a `filter` parameter as input. The `filter` parameter is used to determine which films to retrieve. If the `filter` is set to \\\"ALL FILMS\\\", all films are retrieved. Otherwise, only the films matching the `filter` title are retrieved. The method then calculates the available count for each film and adds the film data, film count, and all films to the `ModelMap`. Finally, it returns the view name for the \\\"manage-films\\\" page.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmController.java\",\n  \"summary\": \"This file contains the controller class for managing films in the Sakila project. It provides methods for displaying a list of films, editing a film, and deleting a film.\",\n  \"methods\": [\n    {\n      \"name\": \"manageFilms\",\n      \"signature\": \"public String manageFilms(ModelMap modelMap)\",\n      \"description\": \"This method is responsible for displaying the list of films on the 'manage-films' page. It adds the list of films, the film count, and the list of all films to the model map, and then returns the view name '/owner/manage-films'.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"showEditProductPage\",\n      \"signature\": \"public ModelAndView showEditProductPage(@PathVariable(name = \\\"id\\\") int id)\",\n      \"description\": \"This method is responsible for displaying the 'edit-film' page. It retrieves the film with the given ID from the film service, adds it to the model, and returns the 'edit-film' view.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"deleteProduct\",\n      \"signature\": \"public String deleteProduct(@PathVariable(name = \\\"id\\\") int id)\",\n      \"description\": \"This method is responsible for deleting a film with the given ID. It calls the film service to delete the film and then redirects the user to the 'manage-films' page.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"findFilmByID\",\n      \"signature\": \"public Film findFilmByID(Integer id)\",\n      \"description\": \"This method is responsible for retrieving a film with the given ID from the film service.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/StaffService.java": [
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/StaffService.java\",\n  \"summary\": \"This file contains the StaffService class, which provides methods for interacting with the Staff entity in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"getAllStaff\",\n      \"signature\": \"public List<Staff> getAllStaff()\",\n      \"description\": \"Retrieves a list of all staff members.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getStaffByUsername\",\n      \"signature\": \"public Staff getStaffByUsername(String username)\",\n      \"description\": \"Retrieves a staff member by their username.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/RentalService.java": [
        "{\n  \"file\": \"RentalService.java\",\n  \"summary\": \"This file contains the RentalService class, which is a Spring Service component responsible for managing rental-related operations. It interacts with the RentalRepository to retrieve and manipulate rental data.\",\n  \"methods\": [\n    {\n      \"name\": \"getRentalsByCustomer\",\n      \"signature\": \"public List<Rental> getRentalsByCustomer(Integer id)\",\n      \"description\": \"Retrieves a list of rentals associated with the specified customer ID.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/RentalService.java\",\n  \"summary\": \"This file contains the RentalService class, which provides methods for managing rental-related operations.\",\n  \"methods\": [\n    {\n      \"name\": \"getRentalsByCustomer\",\n      \"signature\": \"public List<Rental> getRentalsByCustomer(Integer id)\",\n      \"description\": \"Retrieves a list of rentals for the specified customer ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"addRental\",\n      \"signature\": \"public void addRental(int inventoryId, int customerId, Timestamp returnDate)\",\n      \"description\": \"Adds a new rental with the specified inventory ID, customer ID, and return date.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/InventoryService.java": [
        "{\n  \"file\": \"InventoryService.java\",\n  \"summary\": \"This file contains the InventoryService class, which is a Spring Service class responsible for managing the inventory data in the Sakila project. It provides methods to retrieve all inventory items, get an inventory item by its ID, and delete an inventory item by its ID.\",\n  \"methods\": [\n    {\n      \"name\": \"getAllInventory\",\n      \"signature\": \"public List<Inventory> getAllInventory()\",\n      \"description\": \"Retrieves all inventory items from the database.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getInventoriesById\",\n      \"signature\": \"public Inventory getInventoriesById(Integer id)\",\n      \"description\": \"Retrieves an inventory item by its ID from the database.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"deleteInventoryItemById\",\n      \"signature\": \"@Transactional public void deleteInventoryItemById(Integer id)\",\n      \"description\": \"Deletes an inventory item by its ID from the database.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"InventoryService.java\",\n  \"summary\": \"This file contains the InventoryService class, which provides methods for managing inventory items in the Sakila project.\",\n  \"methods\": [\n    {\n      \"name\": \"deleteInventoryItemById\",\n      \"signature\": \"public void deleteInventoryItemById(Integer id)\",\n      \"description\": \"Deletes an inventory item by its ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getInventoryCount\",\n      \"signature\": \"public Integer getInventoryCount()\",\n      \"description\": \"Retrieves the total count of inventory items.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/CustomerService.java": [
        "{\n  \"file\": \"CustomerService.java\",\n  \"summary\": \"This file contains the CustomerService class, which provides methods for interacting with the Customer entity in the Sakila project. It uses the CustomerRepository to perform CRUD operations on the Customer data.\",\n  \"methods\": [\n    {\n      \"name\": \"CustomerService\",\n      \"signature\": \"public CustomerService(CustomerRepository customerRepository)\",\n      \"description\": \"Constructor that initializes the CustomerRepository instance.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getAllCustomers\",\n      \"signature\": \"public List<Customer> getAllCustomers()\",\n      \"description\": \"Retrieves all the customers from the database using the CustomerRepository.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomersByFirstName\",\n      \"signature\": \"public List<Customer> getCustomersByFirstName(String firstName)\",\n      \"description\": \"Retrieves a list of customers with the specified first name using the CustomerRepository.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomersByLastName\",\n      \"signature\": \"public List<Customer> getCustomersByLastName(String lastName)\",\n      \"description\": \"Retrieves a list of customers with the specified last name using the CustomerRepository.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"CustomerService.java\",\n  \"summary\": \"This file contains the CustomerService class, which provides methods for interacting with customer data in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"getCustomersByLastName\",\n      \"signature\": \"public List<Customer> getCustomersByLastName(String lastName)\",\n      \"description\": \"Retrieves a list of customers with the specified last name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomersByFullName\",\n      \"signature\": \"public List<Customer> getCustomersByFullName(String firstName, String lastName)\",\n      \"description\": \"Retrieves a list of customers with the specified first and last name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomerByID\",\n      \"signature\": \"public Customer getCustomerByID(int id)\",\n      \"description\": \"Retrieves a customer with the specified ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomerByEmail\",\n      \"signature\": \"public Customer getCustomerByEmail(String email)\",\n      \"description\": \"Retrieves a customer with the specified email address.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"save\",\n      \"signature\": \"public void save(Customer customer)\",\n      \"description\": \"Saves a customer to the database.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomerCount\",\n      \"signature\": \"public Integer getCustomerCount()\",\n      \"description\": \"Retrieves the total number of customers.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/CategoryService.java": [
        "{\n  \"file\": \"CategoryService.java\",\n  \"summary\": \"This file contains the CategoryService class, which provides methods for interacting with the Category entity in the Sakila project. It uses the CategoryRepository to fetch and retrieve category data.\",\n  \"methods\": [\n    {\n      \"name\": \"getAllCategories\",\n      \"signature\": \"public List<Category> getAllCategories()\",\n      \"description\": \"Retrieves a list of all categories from the CategoryRepository.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getByCategoryId\",\n      \"signature\": \"public Category getByCategoryId(Integer id)\",\n      \"description\": \"Retrieves a single category by its ID from the CategoryRepository.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/ActorService.java": [
        "{\n  \"file\": \"ActorService.java\",\n  \"summary\": \"This file contains the ActorService class, which provides methods for interacting with the Actor entity in the Sakila project. It uses the ActorRepository to perform CRUD operations on the Actor data.\",\n  \"methods\": [\n    {\n      \"name\": \"getAllActors\",\n      \"signature\": \"public List<Actor> getAllActors()\",\n      \"description\": \"Retrieves a list of all actors from the database.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActorByID\",\n      \"signature\": \"public Actor getActorByID(int id)\",\n      \"description\": \"Retrieves an actor by their ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActorsByFullName\",\n      \"signature\": \"public List<Actor> getActorsByFullName(String firstName, String lastName)\",\n      \"description\": \"Retrieves a list of actors by their first and last name.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"getActorsByFirstName\",\n      \"signature\": \"public List<Actor> getActorsByFirstName(String firstName)\",\n      \"description\": \"Retrieves a list of actors by their first name.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/ActorService.java\",\n  \"summary\": \"This file contains the ActorService class, which provides methods for retrieving actors from the database based on first name, last name, and ID.\",\n  \"methods\": [\n    {\n      \"name\": \"getActorsByFirstName\",\n      \"signature\": \"public List<Actor> getActorsByFirstName(String firstName)\",\n      \"description\": \"Retrieves a list of actors with the specified first name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActorsByLastName\",\n      \"signature\": \"public List<Actor> getActorsByLastName(String lastName)\",\n      \"description\": \"Retrieves a list of actors with the specified last name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActorFullNameFromID\",\n      \"signature\": \"public String getActorFullNameFromID(Integer id)\",\n      \"description\": \"Retrieves the full name (first and last name) of an actor with the specified ID.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/services/FilmService.java": [
        "{\n  \"file\": \"FilmService.java\",\n  \"summary\": \"This file contains the FilmService class, which is a Spring Service class responsible for managing the operations related to the Film entity. It interacts with the FilmRepository to perform CRUD operations on the Film data.\",\n  \"methods\": [\n    {\n      \"name\": \"getAllFilms\",\n      \"signature\": \"public List<Film> getAllFilms()\",\n      \"description\": \"Retrieves all the films from the database using the FilmRepository.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilmByID\",\n      \"signature\": \"public Film getFilmByID(int id)\",\n      \"description\": \"Retrieves a film from the database by its ID using the FilmRepository.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilmsByTitle\",\n      \"signature\": \"public List<Film> getFilmsByTitle(String title)\",\n      \"description\": \"Retrieves a list of films from the database by their title using the FilmRepository.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getAvailableFilms\",\n      \"signature\": \"public List<Film> getAvailableFilms()\",\n      \"description\": \"Retrieves a list of available films from the database using the FilmRepository.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmService.java\",\n  \"summary\": \"This file contains the FilmService class, which provides methods for interacting with the film repository and managing film-related operations.\",\n  \"methods\": [\n    {\n      \"name\": \"getAvailableFilms\",\n      \"signature\": \"public List<Film> getAvailableFilms()\",\n      \"description\": \"Retrieves a list of all available films from the film repository.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getAvailableFilmCount\",\n      \"signature\": \"public Integer getAvailableFilmCount(Integer id)\",\n      \"description\": \"Retrieves the count of available films for the given film ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilmsByCategory\",\n      \"signature\": \"public List<Film> getFilmsByCategory(Integer id)\",\n      \"description\": \"Retrieves a list of all films belonging to the category with the given ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilmsByActor\",\n      \"signature\": \"public List<Film> getFilmsByActor(Integer id)\",\n      \"description\": \"Retrieves a list of all films in which the actor with the given ID appears.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"save\",\n      \"signature\": \"public void save(Film film)\",\n      \"description\": \"Saves the given film to the film repository.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"deleteFilmById\",\n      \"signature\": \"public void deleteFilmById(int id)\",\n      \"description\": \"Deletes the film with the given ID from the film repository.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Order.java": [
        "{\n  \"file\": \"Order.java\",\n  \"summary\": \"This file defines the Order class, which represents an order made by a customer for a specific film and rental.\",\n  \"methods\": [\n    {\n      \"name\": \"Order\",\n      \"signature\": \"public Order(Customer customer, Film film, Rental rental)\",\n      \"description\": \"Constructs a new Order object with the given customer, film, and rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomer\",\n      \"signature\": \"public Customer getCustomer()\",\n      \"description\": \"Returns the customer associated with this order.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setCustomer\",\n      \"signature\": \"public void setCustomer(Customer customer)\",\n      \"description\": \"Sets the customer associated with this order.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilm\",\n      \"signature\": \"public Film getFilm()\",\n      \"description\": \"Returns the film associated with this order.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFilm\",\n      \"signature\": \"public void setFilm(Film film)\",\n      \"description\": \"Sets the film associated with this order.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRental\",\n      \"signature\": \"public Rental getRental()\",\n      \"description\": \"Returns the rental associated with this order.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRental\",\n      \"signature\": \"public void setRental(Rental rental)\",\n      \"description\": \"Sets the rental associated with this order.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Film.java": [
        "{\n  \"file\": \"Film.java\",\n  \"summary\": \"This file defines the Film entity class, which represents a film in the Sakila database. The class has various properties such as film ID, title, description, release year, rental duration, rental rate, length, replacement cost, rating, special features, and last update timestamp. The class is annotated with JPA annotations to map it to a database table.\",\n  \"methods\": [\n    {\n      \"name\": \"getFilmId\",\n      \"signature\": \"public int getFilmId()\",\n      \"description\": \"Getter for the film ID property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFilmId\",\n      \"signature\": \"public void setFilmId(int filmId)\",\n      \"description\": \"Setter for the film ID property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getTitle\",\n      \"signature\": \"public String getTitle()\",\n      \"description\": \"Getter for the title property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setTitle\",\n      \"signature\": \"public void setTitle(String title)\",\n      \"description\": \"Setter for the title property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getDescription\",\n      \"signature\": \"public String getDescription()\",\n      \"description\": \"Getter for the description property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setDescription\",\n      \"signature\": \"public void setDescription(String description)\",\n      \"description\": \"Setter for the description property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getReleaseYear\",\n      \"signature\": \"public int getReleaseYear()\",\n      \"description\": \"Getter for the release year property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setReleaseYear\",\n      \"signature\": \"public void setReleaseYear(int releaseYear)\",\n      \"description\": \"Setter for the release year property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRentalDuration\",\n      \"signature\": \"public Integer getRentalDuration()\",\n      \"description\": \"Getter for the rental duration property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRentalDuration\",\n      \"signature\": \"public void setRentalDuration(Integer rentalDuration)\",\n      \"description\": \"Setter for the rental duration property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRentalRate\",\n      \"signature\": \"public BigDecimal getRentalRate()\",\n      \"description\": \"Getter for the rental rate property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRentalRate\",\n      \"signature\": \"public void setRentalRate(BigDecimal rentalRate)\",\n      \"description\": \"Setter for the rental rate property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLength\",\n      \"signature\": \"public Integer getLength()\",\n      \"description\": \"Getter for the length property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLength\",\n      \"signature\": \"public void setLength(Integer length)\",\n      \"description\": \"Setter for the length property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getReplacementCost\",\n      \"signature\": \"public BigDecimal getReplacementCost()\",\n      \"description\": \"Getter for the replacement cost property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setReplacementCost\",\n      \"signature\": \"public void setReplacementCost(BigDecimal replacementCost)\",\n      \"description\": \"Setter for the replacement cost property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRating\",\n      \"signature\": \"public String getRating()\",\n      \"description\": \"Getter for the rating property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRating\",\n      \"signature\": \"public void setRating(String rating)\",\n      \"description\": \"Setter for the rating property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getSpecialFeatures\",\n      \"signature\": \"public String getSpecialFeatures()\",\n      \"description\": \"Getter for the special features property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setSpecialFeatures\",\n      \"signature\": \"public void setSpecialFeatures(String specialFeatures)\",\n      \"description\": \"Setter for the special features property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"public Timestamp getLastUpdate()\",\n      \"description\": \"Getter for the last update timestamp property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Setter for the last update timestamp property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"public boolean equals(Object o)\",\n      \"description\": \"Overrides the default equals method to compare Film objects based on their film ID.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"public int hashCode()\",\n      \"description\": \"Overrides the default hashCode method to generate a hash code based on the film ID.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Film.java\",\n  \"summary\": \"This code defines the Film entity class, which represents a film in the Sakila database. The class has several properties, including the film's title, description, release year, rental duration, and rental rate. The class provides getter and setter methods for each of these properties.\",\n  \"methods\": [\n    {\n      \"name\": \"getTitle\",\n      \"signature\": \"public String getTitle()\",\n      \"description\": \"Returns the title of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setTitle\",\n      \"signature\": \"public void setTitle(String title)\",\n      \"description\": \"Sets the title of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getDescription\",\n      \"signature\": \"public String getDescription()\",\n      \"description\": \"Returns the description of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setDescription\",\n      \"signature\": \"public void setDescription(String description)\",\n      \"description\": \"Sets the description of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getReleaseYear\",\n      \"signature\": \"public int getReleaseYear()\",\n      \"description\": \"Returns the release year of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setReleaseYear\",\n      \"signature\": \"public void setReleaseYear(int releaseYear)\",\n      \"description\": \"Sets the release year of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRentalDuration\",\n      \"signature\": \"public Integer getRentalDuration()\",\n      \"description\": \"Returns the rental duration of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRentalDuration\",\n      \"signature\": \"public void setRentalDuration(Integer rentalDuration)\",\n      \"description\": \"Sets the rental duration of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRentalRate\",\n      \"signature\": \"public BigDecimal getRentalRate()\",\n      \"description\": \"Returns the rental rate of the film.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Film.java\",\n  \"summary\": \"This code defines the Film entity class, which represents a film in the Sakila database. The class has several properties, including rental rate, length, replacement cost, rating, and special features. The class provides getter and setter methods for each of these properties.\",\n  \"methods\": [\n    {\n      \"name\": \"getRentalRate\",\n      \"signature\": \"public BigDecimal getRentalRate()\",\n      \"description\": \"Returns the rental rate of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRentalRate\",\n      \"signature\": \"public void setRentalRate(BigDecimal rentalRate)\",\n      \"description\": \"Sets the rental rate of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLength\",\n      \"signature\": \"public Integer getLength()\",\n      \"description\": \"Returns the length of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLength\",\n      \"signature\": \"public void setLength(Integer length)\",\n      \"description\": \"Sets the length of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getReplacementCost\",\n      \"signature\": \"public BigDecimal getReplacementCost()\",\n      \"description\": \"Returns the replacement cost of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setReplacementCost\",\n      \"signature\": \"public void setReplacementCost(BigDecimal replacementCost)\",\n      \"description\": \"Sets the replacement cost of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRating\",\n      \"signature\": \"public String getRating()\",\n      \"description\": \"Returns the rating of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRating\",\n      \"signature\": \"public void setRating(String rating)\",\n      \"description\": \"Sets the rating of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getSpecialFeatures\",\n      \"signature\": \"public String getSpecialFeatures()\",\n      \"description\": \"Returns the special features of the film.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Film.java\",\n  \"summary\": \"This code snippet is from the Film.java file, which is part of the SakilaProject. It contains getter and setter methods for the 'special_features' and 'last_update' fields of the Film entity.\",\n  \"methods\": [\n    {\n      \"name\": \"getSpecialFeatures\",\n      \"signature\": \"public String getSpecialFeatures()\",\n      \"description\": \"Retrieves the special features of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setSpecialFeatures\",\n      \"signature\": \"public void setSpecialFeatures(String specialFeatures)\",\n      \"description\": \"Sets the special features of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"public Timestamp getLastUpdate()\",\n      \"description\": \"Retrieves the last update timestamp of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp of the film.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Film.java\",\n  \"summary\": \"This code defines the `Film` entity class, which represents a film in the Sakila database. The class has several properties, including `filmId`, `title`, `description`, `releaseYear`, `rentalDuration`, `rentalRate`, `length`, `replacementCost`, `rating`, `specialFeatures`, and `lastUpdate`. The class also includes a `setLastUpdate` method and an `equals` method.\",\n  \"methods\": [\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the `lastUpdate` property of the `Film` object.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"Compares the current `Film` object to another `Film` object and returns `true` if they are equal, and `false` otherwise. The comparison is based on the values of all the properties of the `Film` object.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Film.java\",\n  \"summary\": \"This file contains the Film entity class, which represents a film in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"public int hashCode()\",\n      \"description\": \"Generates a hash code for the Film object based on its properties.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Customer.java": [
        "{\n  \"file\": \"Customer.java\",\n  \"summary\": \"This file defines the Customer entity class, which represents a customer in the Sakila database. The class has properties for the customer's ID, first name, last name, email, active status, creation date, and last update date.\",\n  \"methods\": [\n    {\n      \"name\": \"getCustomerId\",\n      \"signature\": \"public int getCustomerId()\",\n      \"description\": \"Retrieves the customer's ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setCustomerId\",\n      \"signature\": \"public void setCustomerId(int customerId)\",\n      \"description\": \"Sets the customer's ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFirstName\",\n      \"signature\": \"public String getFirstName()\",\n      \"description\": \"Retrieves the customer's first name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFirstName\",\n      \"signature\": \"public void setFirstName(String firstName)\",\n      \"description\": \"Sets the customer's first name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastName\",\n      \"signature\": \"public String getLastName()\",\n      \"description\": \"Retrieves the customer's last name.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Customer.java\",\n  \"summary\": \"This file contains the Customer entity class, which represents a customer in the Sakila database. The class has several properties, including last name, email, active status, creation date, and last update date. The class also provides getter and setter methods for these properties.\",\n  \"methods\": [\n    {\n      \"name\": \"getLastName\",\n      \"signature\": \"public String getLastName()\",\n      \"description\": \"Returns the last name of the customer.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastName\",\n      \"signature\": \"public void setLastName(String lastName)\",\n      \"description\": \"Sets the last name of the customer.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getEmail\",\n      \"signature\": \"public String getEmail()\",\n      \"description\": \"Returns the email address of the customer.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setEmail\",\n      \"signature\": \"public void setEmail(String email)\",\n      \"description\": \"Sets the email address of the customer.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActive\",\n      \"signature\": \"public byte getActive()\",\n      \"description\": \"Returns the active status of the customer (0 for inactive, 1 for active).\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setActive\",\n      \"signature\": \"public void setActive(byte active)\",\n      \"description\": \"Sets the active status of the customer (0 for inactive, 1 for active).\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCreateDate\",\n      \"signature\": \"public Timestamp getCreateDate()\",\n      \"description\": \"Returns the date and time when the customer was created.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setCreateDate\",\n      \"signature\": \"public void setCreateDate(Timestamp createDate)\",\n      \"description\": \"Sets the date and time when the customer was created.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"public Timestamp getLastUpdate()\",\n      \"description\": \"Returns the date and time when the customer's information was last updated.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the date and time when the customer's information was last updated.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Customer.java\",\n  \"summary\": \"This file contains the Customer entity class, which represents a customer in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp for the customer.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"Compares the current customer object with another object to check if they are equal.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"@Override public int hashCode()\",\n      \"description\": \"Generates a hash code for the customer object based on its properties.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Inventory.java": [
        "{\n  \"file\": \"Inventory.java\",\n  \"summary\": \"This file defines the Inventory entity class, which represents a row in the inventory table of the Sakila database. The class has three properties: inventoryId, filmId, and lastUpdate, which are mapped to the corresponding columns in the database table.\",\n  \"methods\": [\n    {\n      \"name\": \"getInventoryId\",\n      \"signature\": \"public int getInventoryId()\",\n      \"description\": \"Returns the inventory ID of the inventory item.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setInventoryId\",\n      \"signature\": \"public void setInventoryId(int inventoryId)\",\n      \"description\": \"Sets the inventory ID of the inventory item.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilmId\",\n      \"signature\": \"public int getFilmId()\",\n      \"description\": \"Returns the film ID of the inventory item.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFilmId\",\n      \"signature\": \"public void setFilmId(int filmId)\",\n      \"description\": \"Sets the film ID of the inventory item.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"public Timestamp getLastUpdate()\",\n      \"description\": \"Returns the timestamp of the last update for the inventory item.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the timestamp of the last update for the inventory item.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Inventory.java\",\n  \"summary\": \"This file contains the Inventory entity class, which represents an inventory item in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp for the inventory item.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"Compares the current Inventory object with another object for equality, based on the inventory ID and last update timestamp.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"@Override public int hashCode()\",\n      \"description\": \"Generates a hash code for the Inventory object, based on the inventory ID and last update timestamp.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmActorPK.java": [
        "{\n  \"file\": \"FilmActorPK.java\",\n  \"summary\": \"This file defines the primary key class for the FilmActor entity in the Sakila database. It implements the Serializable interface and contains two integer properties, actorId and filmId, which are annotated as the primary key columns in the database.\",\n  \"methods\": [\n    {\n      \"name\": \"getActorId\",\n      \"signature\": \"public Integer getActorId()\",\n      \"description\": \"Getter method for the actorId property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setActorId\",\n      \"signature\": \"public void setActorId(int actorId)\",\n      \"description\": \"Setter method for the actorId property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilmId\",\n      \"signature\": \"public int getFilmId()\",\n      \"description\": \"Getter method for the filmId property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFilmId\",\n      \"signature\": \"public void setFilmId(int filmId)\",\n      \"description\": \"Setter method for the filmId property.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"public boolean equals(Object o)\",\n      \"description\": \"Overrides the equals method to compare two FilmActorPK objects based on their actorId and filmId properties.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmActorPK.java\",\n  \"summary\": \"This file contains the definition of the FilmActorPK class, which is a composite primary key class for the film_actor table in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"public int hashCode()\",\n      \"description\": \"Generates a hash code for the FilmActorPK object based on the actorId and filmId properties.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Category.java": [
        "{\n  \"file\": \"Category.java\",\n  \"summary\": \"This file defines the Category entity class, which represents a category in the Sakila database. The class has three properties: categoryId, name, and lastUpdate, and provides getter and setter methods for each property.\",\n  \"methods\": [\n    {\n      \"name\": \"getCategoryId\",\n      \"signature\": \"public int getCategoryId()\",\n      \"description\": \"Returns the category ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setCategoryId\",\n      \"signature\": \"public void setCategoryId(int categoryId)\",\n      \"description\": \"Sets the category ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getName\",\n      \"signature\": \"public String getName()\",\n      \"description\": \"Returns the name of the category.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setName\",\n      \"signature\": \"public void setName(String name)\",\n      \"description\": \"Sets the name of the category.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"public Timestamp getLastUpdate()\",\n      \"description\": \"Returns the timestamp of the last update to the category.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the timestamp of the last update to the category.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Category.java\",\n  \"summary\": \"This file contains the Category entity class, which represents a category in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp for the category.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"Compares the current category object with another object for equality, based on the category ID, name, and last update timestamp.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"@Override public int hashCode()\",\n      \"description\": \"Generates a hash code for the category object, based on the category ID, name, and last update timestamp.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmCategoryPK.java": [
        "{\n  \"file\": \"FilmCategoryPK.java\",\n  \"summary\": \"This file defines the primary key class for the FilmCategory entity, which is a composite key consisting of the film_id and category_id columns.\",\n  \"methods\": [\n    {\n      \"name\": \"getFilmId\",\n      \"signature\": \"public int getFilmId()\",\n      \"description\": \"Getter method for the film_id field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFilmId\",\n      \"signature\": \"public void setFilmId(int filmId)\",\n      \"description\": \"Setter method for the film_id field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCategoryId\",\n      \"signature\": \"public int getCategoryId()\",\n      \"description\": \"Getter method for the category_id field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setCategoryId\",\n      \"signature\": \"public void setCategoryId(int categoryId)\",\n      \"description\": \"Setter method for the category_id field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"public boolean equals(Object o)\",\n      \"description\": \"Overrides the equals method to compare two FilmCategoryPK objects based on their film_id and category_id fields.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmCategoryPK.java\",\n  \"summary\": \"This file contains the definition of the FilmCategoryPK class, which represents the primary key for the film_category table in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"public int hashCode()\",\n      \"description\": \"Generates a hash code for the FilmCategoryPK object based on the filmId and categoryId properties.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmActor.java": [
        "{\n  \"file\": \"FilmActor.java\",\n  \"summary\": \"This file defines the FilmActor entity, which represents the relationship between films and actors in the Sakila database. It is annotated with JPA annotations to map the entity to the 'film_actor' table in the database.\",\n  \"methods\": [\n    {\n      \"name\": \"getActorId\",\n      \"signature\": \"public int getActorId()\",\n      \"description\": \"Getter for the actorId field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setActorId\",\n      \"signature\": \"public void setActorId(int actorId)\",\n      \"description\": \"Setter for the actorId field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFilmId\",\n      \"signature\": \"public int getFilmId()\",\n      \"description\": \"Getter for the filmId field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFilmId\",\n      \"signature\": \"public void setFilmId(int filmId)\",\n      \"description\": \"Setter for the filmId field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"public Timestamp getLastUpdate()\",\n      \"description\": \"Getter for the lastUpdate field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Setter for the lastUpdate field.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmActor.java\",\n  \"summary\": \"This file contains the FilmActor entity class, which represents the relationship between films and actors in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp for the FilmActor entity.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"Compares two FilmActor entities for equality based on their actorId, filmId, and lastUpdate properties.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"@Override public int hashCode()\",\n      \"description\": \"Generates a hash code for the FilmActor entity based on its actorId, filmId, and lastUpdate properties.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmCategory.java": [
        "{\n  \"file\": \"FilmCategory.java\",\n  \"summary\": \"This class represents the film_category table in the Sakila database. It has three fields: filmId, categoryId, and lastUpdate. The class is annotated with JPA annotations to map it to the database table.\",\n  \"methods\": [\n    {\n      \"name\": \"getFilmId\",\n      \"signature\": \"public int getFilmId()\",\n      \"description\": \"Getter for the filmId field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFilmId\",\n      \"signature\": \"public void setFilmId(Integer filmId)\",\n      \"description\": \"Setter for the filmId field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCategoryId\",\n      \"signature\": \"public int getCategoryId()\",\n      \"description\": \"Getter for the categoryId field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setCategoryId\",\n      \"signature\": \"public void setCategoryId(Integer categoryId)\",\n      \"description\": \"Setter for the categoryId field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"public Timestamp getLastUpdate()\",\n      \"description\": \"Getter for the lastUpdate field.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Setter for the lastUpdate field.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmCategory.java\",\n  \"summary\": \"This file contains the FilmCategory entity class, which represents a mapping between a film and a category in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp for the film-category mapping.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"Compares two FilmCategory objects for equality based on the film ID, category ID, and last update timestamp.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"@Override public int hashCode()\",\n      \"description\": \"Generates a hash code for a FilmCategory object based on the film ID, category ID, and last update timestamp.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Actor.java": [
        "{\n  \"file\": \"Actor.java\",\n  \"summary\": \"This file contains the Actor entity class, which represents an actor in the Sakila database. The class has properties for the actor's ID, first name, last name, and last update timestamp. It also includes getter and setter methods for these properties.\",\n  \"methods\": [\n    {\n      \"name\": \"getActorId\",\n      \"signature\": \"public int getActorId()\",\n      \"description\": \"Returns the actor's ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setActorId\",\n      \"signature\": \"public void setActorId(int actorId)\",\n      \"description\": \"Sets the actor's ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFirstName\",\n      \"signature\": \"public String getFirstName()\",\n      \"description\": \"Returns the actor's first name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFirstName\",\n      \"signature\": \"public void setFirstName(String firstName)\",\n      \"description\": \"Sets the actor's first name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastName\",\n      \"signature\": \"public String getLastName()\",\n      \"description\": \"Returns the actor's last name.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastName\",\n      \"signature\": \"public void setLastName(String lastName)\",\n      \"description\": \"Sets the actor's last name.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Actor.java\",\n  \"summary\": \"This file contains the Actor class, which represents an actor in the Sakila database. The class has properties for the actor's ID, first name, last name, and last update timestamp, as well as methods to get and set these properties. The class also implements the equals and hashCode methods to allow for comparison and hashing of Actor objects.\",\n  \"methods\": [\n    {\n      \"name\": \"getLastName\",\n      \"signature\": \"public String getLastName()\",\n      \"description\": \"Returns the last name of the actor.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastName\",\n      \"signature\": \"public void setLastName(String lastName)\",\n      \"description\": \"Sets the last name of the actor.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"public Timestamp getLastUpdate()\",\n      \"description\": \"Returns the last update timestamp of the actor.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp of the actor.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"public boolean equals(Object o)\",\n      \"description\": \"Compares the current Actor object to another object to determine if they are equal. Two Actors are considered equal if they have the same actor ID, first name, last name, and last update timestamp.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"public int hashCode()\",\n      \"description\": \"Generates a hash code for the current Actor object based on its actor ID, first name, last name, and last update timestamp.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Staff.java": [
        "{\n  \"file\": \"Staff.java\",\n  \"summary\": \"This file defines the Staff entity class, which represents a staff member in the Sakila database. The class has several properties, including staff ID, first name, last name, picture, email, active status, username, password, and last update timestamp.\",\n  \"methods\": [\n    {\n      \"name\": \"getStaffId\",\n      \"signature\": \"public int getStaffId()\",\n      \"description\": \"Retrieves the staff ID of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setStaffId\",\n      \"signature\": \"public void setStaffId(int staffId)\",\n      \"description\": \"Sets the staff ID of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getFirstName\",\n      \"signature\": \"public String getFirstName()\",\n      \"description\": \"Retrieves the first name of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFirstName\",\n      \"signature\": \"public void setFirstName(String firstName)\",\n      \"description\": \"Sets the first name of the staff member.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Staff.java\",\n  \"summary\": \"This code defines the Staff entity class, which represents a staff member in the Sakila database. The class has several properties, including first name, last name, picture, email, active status, and username. The class provides getter and setter methods for each of these properties.\",\n  \"methods\": [\n    {\n      \"name\": \"setFirstName\",\n      \"signature\": \"public void setFirstName(String firstName)\",\n      \"description\": \"Sets the first name of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastName\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"last_name\\\")\\npublic String getLastName()\",\n      \"description\": \"Returns the last name of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastName\",\n      \"signature\": \"public void setLastName(String lastName)\",\n      \"description\": \"Sets the last name of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getPicture\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"picture\\\")\\npublic byte[] getPicture()\",\n      \"description\": \"Returns the picture of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setPicture\",\n      \"signature\": \"public void setPicture(byte[] picture)\",\n      \"description\": \"Sets the picture of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getEmail\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"email\\\")\\npublic String getEmail()\",\n      \"description\": \"Returns the email address of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setEmail\",\n      \"signature\": \"public void setEmail(String email)\",\n      \"description\": \"Sets the email address of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getActive\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"active\\\")\\npublic byte getActive()\",\n      \"description\": \"Returns the active status of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setActive\",\n      \"signature\": \"public void setActive(byte active)\",\n      \"description\": \"Sets the active status of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getUsername\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"username\\\")\\npublic String getUsername()\",\n      \"description\": \"Returns the username of the staff member.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Staff.java\",\n  \"summary\": \"This file contains the Staff entity class, which represents a staff member in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"setActive\",\n      \"signature\": \"public void setActive(byte active)\",\n      \"description\": \"Sets the active status of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getUsername\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"username\\\")\\npublic String getUsername()\",\n      \"description\": \"Returns the username of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setUsername\",\n      \"signature\": \"public void setUsername(String username)\",\n      \"description\": \"Sets the username of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getPassword\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"password\\\")\\npublic String getPassword()\",\n      \"description\": \"Returns the password of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setPassword\",\n      \"signature\": \"public void setPassword(String password)\",\n      \"description\": \"Sets the password of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"last_update\\\")\\npublic Timestamp getLastUpdate()\",\n      \"description\": \"Returns the last update timestamp of the staff member.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp of the staff member.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Staff.java\",\n  \"summary\": \"This code snippet is from the Staff class in the SakilaProject. It contains two methods: setLastUpdate() and equals().\",\n  \"methods\": [\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"This method sets the lastUpdate field of the Staff object to the provided Timestamp value.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"This method overrides the default equals() method to compare two Staff objects based on their fields, including staffId, active, firstName, lastName, picture, email, username, password, and lastUpdate.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}",
        "{\n  \"file\": \"SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Staff.java\",\n  \"summary\": \"This code snippet is from the Staff class in the SakilaProject. It overrides the hashCode() method to generate a unique hash code for the object based on its properties.\",\n  \"methods\": [\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"public int hashCode()\",\n      \"description\": \"Generates a unique hash code for the Staff object based on its properties, including staffId, firstName, lastName, email, active, username, password, and lastUpdate. The picture byte array is also included in the hash code calculation.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/Rental.java": [
        "{\n  \"file\": \"Rental.java\",\n  \"summary\": \"This file defines the Rental entity class, which represents a rental record in the Sakila database. The class has several properties, including the rental ID, rental date, inventory ID, customer ID, return date, last update timestamp, and staff ID.\",\n  \"methods\": [\n    {\n      \"name\": \"getRentalId\",\n      \"signature\": \"public int getRentalId()\",\n      \"description\": \"Getter method for the rental ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRentalId\",\n      \"signature\": \"public void setRentalId(int rentalId)\",\n      \"description\": \"Setter method for the rental ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getRentalDate\",\n      \"signature\": \"public Timestamp getRentalDate()\",\n      \"description\": \"Getter method for the rental date.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setRentalDate\",\n      \"signature\": \"public void setRentalDate(Timestamp rentalDate)\",\n      \"description\": \"Setter method for the rental date.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getInventoryId\",\n      \"signature\": \"public int getInventoryId()\",\n      \"description\": \"Getter method for the inventory ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setInventoryId\",\n      \"signature\": \"public void setInventoryId(int inventoryId)\",\n      \"description\": \"Setter method for the inventory ID.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Rental.java\",\n  \"summary\": \"This code defines the Rental entity class, which represents a rental record in the Sakila database. The class has several properties, including inventory ID, customer ID, return date, staff ID, and last update timestamp. The class provides getter and setter methods for these properties.\",\n  \"methods\": [\n    {\n      \"name\": \"setInventoryId\",\n      \"signature\": \"public void setInventoryId(int inventoryId)\",\n      \"description\": \"Sets the inventory ID for the rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getCustomerId\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"customer_id\\\")\\npublic int getCustomerId()\",\n      \"description\": \"Returns the customer ID for the rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setCustomerId\",\n      \"signature\": \"public void setCustomerId(int customerId)\",\n      \"description\": \"Sets the customer ID for the rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getReturnDate\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"return_date\\\")\\npublic Timestamp getReturnDate()\",\n      \"description\": \"Returns the return date for the rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setReturnDate\",\n      \"signature\": \"public void setReturnDate(Timestamp returnDate)\",\n      \"description\": \"Sets the return date for the rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getStaffId\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"staff_id\\\")\\npublic int getStaffId()\",\n      \"description\": \"Returns the staff ID for the rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setStaffId\",\n      \"signature\": \"public void setStaffId(int staffId)\",\n      \"description\": \"Sets the staff ID for the rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getLastUpdate\",\n      \"signature\": \"@Basic\\n@Column(name = \\\"last_update\\\")\\npublic Timestamp getLastUpdate()\",\n      \"description\": \"Returns the last update timestamp for the rental.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp for the rental.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"Rental.java\",\n  \"summary\": \"This code defines the Rental entity class, which represents a rental record in the Sakila database. It includes methods for setting the last update timestamp, as well as overriding the equals and hashCode methods to compare and hash rental objects.\",\n  \"methods\": [\n    {\n      \"name\": \"setLastUpdate\",\n      \"signature\": \"public void setLastUpdate(Timestamp lastUpdate)\",\n      \"description\": \"Sets the last update timestamp for the rental record.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"Compares the current rental object with another object to determine if they are equal. The comparison is based on the rental ID, inventory ID, customer ID, staff ID, rental date, return date, and last update timestamp.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"@Override public int hashCode()\",\n      \"description\": \"Generates a hash code for the rental object based on its rental ID, inventory ID, customer ID, staff ID, rental date, return date, and last update timestamp.\",\n      \"complexity\": \"medium\"\n    }\n  ]\n}"
    ],
    "SakilaProject/src/main/java/com/sparta/engineering72/sakilaproject/entities/FilmText.java": [
        "{\n  \"file\": \"FilmText.java\",\n  \"summary\": \"This class represents the 'film_text' entity in the Sakila database. It contains the film ID, title, and description of a film.\",\n  \"methods\": [\n    {\n      \"name\": \"getFilmId\",\n      \"signature\": \"public int getFilmId()\",\n      \"description\": \"Retrieves the film ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setFilmId\",\n      \"signature\": \"public void setFilmId(int filmId)\",\n      \"description\": \"Sets the film ID.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getTitle\",\n      \"signature\": \"public String getTitle()\",\n      \"description\": \"Retrieves the title of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setTitle\",\n      \"signature\": \"public void setTitle(String title)\",\n      \"description\": \"Sets the title of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"getDescription\",\n      \"signature\": \"public String getDescription()\",\n      \"description\": \"Retrieves the description of the film.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"setDescription\",\n      \"signature\": \"public void setDescription(String description)\",\n      \"description\": \"Sets the description of the film.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}",
        "{\n  \"file\": \"FilmText.java\",\n  \"summary\": \"This file contains the FilmText entity class, which represents a film text in the Sakila database.\",\n  \"methods\": [\n    {\n      \"name\": \"setDescription\",\n      \"signature\": \"public void setDescription(String description)\",\n      \"description\": \"Sets the description of the film text.\",\n      \"complexity\": \"low\"\n    },\n    {\n      \"name\": \"equals\",\n      \"signature\": \"@Override public boolean equals(Object o)\",\n      \"description\": \"Compares the current FilmText object with another object for equality, based on the film ID, title, and description.\",\n      \"complexity\": \"medium\"\n    },\n    {\n      \"name\": \"hashCode\",\n      \"signature\": \"@Override public int hashCode()\",\n      \"description\": \"Generates a hash code for the FilmText object, based on the film ID, title, and description.\",\n      \"complexity\": \"low\"\n    }\n  ]\n}"
    ]
}